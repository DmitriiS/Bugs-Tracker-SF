<apex:page showHeader="false" sidebar="false">
	<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">      
<head>
    <title>Salesforce Bugs Tracker Application</title>
    <apex:stylesheet value="{!URLFOR($Resource.SLDS100, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
    <apex:stylesheet value="https://code.jquery.com/ui/1.11.4/themes/ui-lightness/jquery-ui.css" />
    <script src="https://code.jquery.com/jquery-1.12.2.js"></script>
    <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
</head>

<apex:remoteObjects >
	<apex:remoteObjectModel name="Objective__c" 
							jsShorthand="Objective" 
							fields="Id,Name,Description__c,Objective_Status__c,Objective_Type__c,Start_Date__c,End_Date__c,Version__c">
	</apex:remoteObjectModel>
</apex:remoteObjects>

<body>
<div class="slds">  
<!-- IMPROVE THIS PART -->
<div id="wrapper" aria-hidden="false">
<div class="slds-page-header" role="banner">
  <div class="slds-grid">
    <div class="slds-col slds-has-flexi-truncate">
      <div class="slds-media">
        <div class="slds-media__figure">
          <svg aria-hidden="true" class="slds-icon slds-icon--large slds-icon-standard-user">
            <use xlink:href="{!URLFOR($Resource.SLDS100, 'assets/icons/standard-sprite/svg/symbols.svg#task')}"></use>
          </svg>
        </div>
        <div class="slds-media__body">
          <div class="slds-grid">
            <h1 class="slds-page-header__title slds-m-right--small slds-truncate slds-align-middle" title="Record Title">List of Objectives</h1>
            <div class="slds-col slds-shrink-none">
              <button class="slds-button slds-button--neutral slds-not-selected" aria-live="assertive" id="newObjective">
                <span class="slds-text-not-selected">
                  <svg aria-hidden="true" class="slds-button__icon--stateful slds-button__icon--left">
                    <use xlink:href="{!URLFOR($Resource.SLDS100, 'assets/icons/utility-sprite/svg/symbols.svg#add')}"></use>
                  </svg>Add new Bug or Feature
                </span>                
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="slds-col slds-no-flex slds-align-bottom">
        <button class="slds-button slds-button--brand" id="backupButton">BackUp Settings</button>        
    </div>  
  </div>
</div>

<table class="slds-table slds-table--bordered">
    <thead>
      <tr class="slds-text-heading--label">        
        <th class="slds-is-sortable" scope="col">
          <div class="slds-truncate">Objective Name</div>
        </th>
        <th class="slds-is-sortable" scope="col">
          <div class="slds-truncate">Objective Type</div>
        </th>
        <th class="slds-is-sortable" scope="col">
          <div class="slds-truncate">Objective Status</div>
        </th>
        <th class="slds-is-sortable" scope="col">
          <div class="slds-truncate">Start Date</div>
        </th>
        <th class="slds-is-sortable" scope="col">
          <div class="slds-truncate">End Date</div>
        </th>
        <th class="slds-is-sortable" scope="col">
          <div class="slds-truncate">Description</div>
        </th>
        <th class="slds-is-sortable" scope="col">
          <div class="slds-truncate">Version</div>
        </th>       
        <th class="slds-cell-shrink"></th>
      </tr>
    </thead>
    <tbody id='theObjectivesTable'>   
    <!--TABLE POPULATED FROM REMOTE OBJECTS -->
    </tbody>
</table>

	<!-- FORM FOR CREATING NEW OBJECTIVE -->
  	<div class="slds-modal slds-fade-in-close" id="newObjectiveModal" aria-hidden="true" role="dialog">
    <div class="slds-modal__container">
      <div class="slds-modal__header">
        <button class="slds-button slds-button--icon-inverse slds-modal__close cancel-create" >
          <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
            <use xlink:href="{!URLFOR($Resource.SLDS100, 'assets/icons/action-sprite/svg/symbols.svg#close')}"></use>
          </svg>
          <span class="slds-assistive-text">Close</span>
        </button>
        <h2 class="slds-text-heading--medium">Add new Bug or Feature</h2>
      </div>
      <div class="slds-modal__content slds-p-around--medium">
        <div>
        <form class="slds-form--stacked">
			<div class="slds-form-element">
				<label class="slds-form-element__label slds-required" for="name">*Name</label>
				<div class="slds-form-element__control">
					<input id="newName" class="slds-input" type="text" />
				</div>
			</div>
			
			<!--RADIOBUTTON FOR CHOOSING TYPE OF OBJECTIVE -->
			<div class="slds-form-element">
				<fieldset class="slds-form-element">
				    <legend class="form-element__legend slds-form-element__label slds-form-element__label"></legend>
				    <label class="slds-form-element__label slds-required" for="name">*Type of Objective</label><br />
				    <div class="slds-form-element__control" id="selectTypeOfObjectiveDiv">
				      <label class="slds-radio">
				        <input type="radio" name="selectTypeOfObjective" value="Bug">
					        <span class="slds-radio--faux"></span>
					        <span class="slds-form-element__label">Bug</span>
				        </input>
				      </label>
				      <label class="slds-radio">
				        <input type="radio" name="selectTypeOfObjective" value="Feature">
					        <span class="slds-radio--faux"></span>
					        <span class="slds-form-element__label">Feature</span>
				        </input>
				      </label>
				    </div>
				</fieldset>
			</div>

			<!--RADIOBUTTON FOR CHOOSING STATUS OF OBJECTIVE -->
			<div class="slds-form-element" id="statusRadioButton">
				<fieldset class="slds-form-element">
				    <legend class="form-element__legend slds-form-element__label slds-form-element__label"></legend>
				    <label class="slds-form-element__label slds-required" for="name">*Status of Objective</label><br />
				    <div class="slds-form-element__control">
				      <label class="slds-radio" for="colReq">
				        <input type="radio" name="selectStatusOfObjective" id="colReq" value="Collect requirements">
					        <span class="slds-radio--faux"></span>
					        <span class="slds-form-element__label">Collect requirements</span>
				        </input>
				      </label>
				      <label class="slds-radio">
				        <input type="radio" name="selectStatusOfObjective" value="Open">
					        <span class="slds-radio--faux"></span>
					        <span class="slds-form-element__label">Open</span>
				        </input>
				      </label>				    
				    <label class="slds-radio">
				        <input type="radio" name="selectStatusOfObjective" value="In Progress">
					        <span class="slds-radio--faux"></span>
					        <span class="slds-form-element__label">In Progress</span>
				        </input>
				      </label>
				      <label class="slds-radio" for="inRev">
				        <input type="radio" name="selectStatusOfObjective" id="inRev" value="In Review">
					        <span class="slds-radio--faux"></span>
					        <span class="slds-form-element__label">In Review</span>
				        </input>
				      </label>
				      <label class="slds-radio">
				        <input type="radio" name="selectStatusOfObjective" value="Closed">
					        <span class="slds-radio--faux"></span>
					        <span class="slds-form-element__label">Closed</span>
				        </input>
				      </label>
				    </div>
				</fieldset>
			</div>

			<div class="slds-form-element">
				<label class="slds-form-element__label" for="description">Description</label>
				<div class="slds-form-element__control">
					<input id="newDescription" class="slds-input" type="text" />
				</div>
			</div>
			<div class="slds-form-element version">
				<label class="slds-form-element__label slds-required" for="version" >*Version</label>
				<div class="slds-form-element__control">
					<input id="newVersion" class="slds-input" type="text" />
				</div>
			</div>
			<div class="slds-form-element">
				<label class="slds-form-element__label slds-required" for="startDate">*Start Date</label>
				<div class="slds-form-element__control">
					<input id="newStartDate" class="slds-input date-pick" />
				</div>
			</div>
			<div class="slds-form-element">
				<label class="slds-form-element__label" for="endDate">End Date</label>
				<div class="slds-form-element__control">
					<input id="newEndDate" class="slds-input date-pick" type="text" />
				</div>
			</div>		
			<input type="hidden" class="form-control" id="inputId" />			
		</form>
        </div>
      </div>
      <div class="slds-modal__footer">
        <button class="slds-button slds-button--neutral cancel-modal cancel-create-down">Cancel</button>
        <button class="slds-button slds-button--neutral slds-button--brand" id="saveObjective">Save</button>
      </div>
    </div>
    </div>

	<!-- FORM FOR EDITING OBJECTIVE -->
  	<div class="slds-modal slds-fade-in-close" id="editObjectiveModal" aria-hidden="true" role="dialog">
    <div class="slds-modal__container">
      <div class="slds-modal__header">
        <button class="slds-button slds-button--icon-inverse slds-modal__close cancel-edit" >
          <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
            <use xlink:href="{!URLFOR($Resource.SLDS100, 'assets/icons/action-sprite/svg/symbols.svg#close')}"></use>
          </svg>
          <span class="slds-assistive-text">Close</span>
        </button>
        <h2 class="slds-text-heading--medium">Edit Objective</h2>
      </div>
      <div class="slds-modal__content slds-p-around--medium">
        <div>
        <form class="slds-form--stacked">
			<div class="slds-form-element">
				<label class="slds-form-element__label slds-required" for="name">Name</label>
				<div class="slds-form-element__control">
					<input id="editName" class="slds-input" type="text" />
				</div>
			</div>
			<div class="slds-form-element">
				<label class="slds-form-element__label" for="objectiveType">Objective Type</label>
				<div class="slds-form-element__control">
					<input id="editObjectiveType" class="slds-input" type="text" disabled="disabled" />
				</div>
			</div>
			<div class="slds-form-element">
				<label class="slds-form-element__label" for="objectiveStatus">Objective Status</label>
				<div class="slds-form-element__control">
					<input id="editObjectiveStatus" class="slds-input" type="text" disabled="disabled"/>
				</div>
			</div>	
			<div class="slds-form-element">
				<div class="slds-form-element__control">
					<label class="slds-checkbox">
				        <input type="checkbox" name="options" id="checkboxUpgradeStatus"/>
				        <span class="slds-checkbox--faux"></span>
				        <span class="slds-form-element__label">Upgrade Status</span>
			        </label>
				</div>
			</div>
			<div class="slds-form-element">
				<label class="slds-form-element__label" for="description">Description</label>
				<div class="slds-form-element__control">
					<input id="editDescription" class="slds-input" type="text" />
				</div>
			</div>					
			<div class="slds-form-element version">
				<label class="slds-form-element__label slds-required" for="version">Version</label>
				<div class="slds-form-element__control">
					<input id="editVersion" class="slds-input" type="text" />
				</div>
			</div>
			<div class="slds-form-element">
				<label class="slds-form-element__label slds-required" for="startDate">Start Date</label>
				<div class="slds-form-element__control">
					<input id="editStartDate" class="slds-input date-pick" disabled="disabled" />
				</div>
			</div>
			<div class="slds-form-element">
				<label class="slds-form-element__label" for="endDate">End Date</label>
				<div class="slds-form-element__control">
					<input id="editEndDate" class="slds-input date-pick" type="text" />
				</div>
			</div>		
			<input type="hidden" class="form-control" id="editId" />			
			</form>
        </div>
      </div>
      <div class="slds-modal__footer">
        <button class="slds-button slds-button--neutral cancel-modal cancel-edit-down">Cancel</button>
        <button class="slds-button slds-button--neutral slds-button--brand" id="saveEditedObjective">Save</button>
      </div>
    </div>
    </div>
    <div class="slds-backdrop slds-backdrop--close" id="modalBackground"></div>
    	
  	<footer role="contentinfo" class="slds-p-around--large">
      <div class="slds-grid slds-grid--align-spread">
        <p class="slds-col">Salesforce Bugs Tracker Application</p>
        <p class="slds-col">&copy; Dmitrii Surkov</p>
      </div>
    </footer>
	</div>
	</div> 
</body>
</html> 

<script type="text/javascript">

	// Initial javascript
	j$ = jQuery.noConflict();
	
	j$(document).ready(function () 
    {    	
    	retrieveObjectives();

    	j$("#newStartDate, .date-pick").datepicker(
    	{
    		dateFormat:"mm/dd/yy",
    	});

		clearFieldValues();
    });    
	
	// New bug or feature click    
    j$('#newObjective').click(function()
    { 
    	openCreateModalWindow();
    });

	// Save button click Create dialog      
    j$('#saveObjective').click(function()
    { 
    	createObjective();
    });

    // Close button click Create dialog
    j$('.cancel-create').click(function()
    {
    	closeCreateModalWindow();
    	clearFieldValues();
    });

    j$('.cancel-create-down').click(function()
    {
    	closeCreateModalWindow();
    	clearFieldValues();
    });   

    // Save button click Edit dialog       
    j$('#saveEditedObjective').click(function()
    { 
    	editObjective();
    });

    // Close button click Edit dialog
    j$('.cancel-edit').click(function()
    {
    	closeEditModalWindow();
    });    

    j$('.cancel-edit-down').click(function()
    {
    	closeEditModalWindow();
    });        

    // Backup button click
    j$('#backupButton').click(function()
    {
    	
    });

    // Picklist open button click
    j$('#typePicklist').click(function()
    {
    	openPicklistType();
    	return false;
    });

    // Picklist Status bug open button click
    j$('#statusBugPicklist').click(function()
    {
    	openPicklistBugStatus();
    	return false;
    });

    // Picklist Status feature open button click
    j$('#statusFeaturePicklist').click(function()
    {
    	openPicklistFeatureStatus();
    	return false;
    });
    
	// Picklist choose button click
    j$('.slds-dropdown__item').click(function()
    {
    	//alert(j$(".slds-dropdown__item").val());
    	console.log(j$(".slds-dropdown__item").val());
    });

    // Function to retrieve all objective
    function retrieveObjectives()
    {
    	var objectives = new SObjectModel.Objective();
    	objectives.retrieve({limit: 100}, function(err, records)
    	{
            if(err) 
            {
				alert(err.message);
			}else 
			{
				populate(records); 
			}
		});				
    }

    // Function to populate retrieved records to page
    function populate(records)
    {
    	var tableBody = j$('#theObjectivesTable');
        records.forEach(function(record) 
        {
        	var tableRow = j$('<tr class="slds-hint-parent">');
        	var tableColName = j$('<td class="slds-truncate" scope="row" data-label="Name">' + record.get('Name') + '</td>');
        	var tableColDesc = j$('<td class="slds-truncate" scope="row" data-label="Description">' + record.get('Description__c') + '</td>');
        	var tableColStat = j$('<td class="slds-truncate statusField" scope="row" data-label="Status">' + record.get('Objective_Status__c') + '</td>');
        	var colStatus = record.get('Objective_Status__c');
        	var tableColType = j$('<td class="slds-truncate" scope="row" data-label="Type">' + record.get('Objective_Type__c') + '</td>');
        	var colType = record.get('Objective_Type__c');
        	var tableColVers = j$('<td class="slds-truncate" scope="row" data-label="Version">' + record.get('Version__c') + '</td>');
        	var tableColSDate = j$('<td class="slds-truncate" scope="row" data-label="Start_Date">' + record.get('Start_Date__c') + '</td>');
        	var tableColEDate = j$('<td class="slds-truncate" scope="row" data-label="End_Date">' + record.get('End_Date__c') + '</td>');
        	var tableEdit = j$('<td class="slds-cell-shrink" data-label="Actions"><button class="slds-button slds-button--neutral">Edit</button></td>');
        	
        	// Enable delete buttons only if status == closed
        	if (colStatus == "Closed")
        	{
        		var tableDelete = j$('<td class="slds-cell-shrink" data-label="Actions"><button class="slds-button slds-button--neutral">Delete</button></td></tr>');  
        	}else
        	{
        		var tableDelete = j$('<td class="slds-cell-shrink" data-label="Actions"><button class="slds-button slds-button--neutral deleteButton" disabled="true">Delete</button></td></tr>'); 
        	}        

        	tableEdit.click(function()
        	{        	  
        		j$("#checkboxUpgradeStatus").prop('checked', false);
        		j$('#checkboxUpgradeStatus').removeAttr("disabled");
        		if (colStatus === "Closed")
		    	{
		    		j$('#checkboxUpgradeStatus').attr("disabled", "disabled");
		    	}

        		if (colType === "Bug")
        		{
        			j$(".version").show();
        		}else
        		{
        			j$(".version").hide();
        		}

				j$('#editId').val(record.get("Id"));
				j$('#editName').val(record.get("Name"));
				j$('#editDescription').val(record.get("Description__c"));
				j$('#editObjectiveStatus').val(record.get("Objective_Status__c"));
				j$('#editObjectiveType').val(record.get("Objective_Type__c"));
				j$('#editVersion').val(record.get("Version__c"));
				j$('#editStartDate').val(record.get("Start_Date__c"));
				j$('#editEndDate').val(record.get("End_Date__c"));
				openEditModalWindow();				
            });

			tableDelete.click(function()
			{			
				j$('#inputId').val(record.get("Id"));
				deleteObjective();
            });

			tableRow.prepend(tableDelete);
        	tableRow.prepend(tableEdit);        	
        	tableRow.prepend(tableColVers); 
        	tableRow.prepend(tableColDesc);
        	tableRow.prepend(tableColEDate);
        	tableRow.prepend(tableColSDate);
        	tableRow.prepend(tableColStat);
        	tableRow.prepend(tableColType);
	        tableRow.prepend(tableColName);
	        tableRow.appendTo(tableBody);

	        checkForNull();
        });
	}    

	// Function to Create Objective
  	function createObjective()
  	{
  		var objType = j$('input[name="selectTypeOfObjective"]:checked').val();
  		var objStatus = j$('input[name="selectStatusOfObjective"]:checked').val();
  		var objVersion = j$('#newVersion').val();
  		var objStartDate = j$('#newStartDate').val();
    	var createObj = new SObjectModel.Objective(
	    { 
	    	Name : j$('#newName').val(),
			Description__c : j$('#newDescription').val(),						
			Objective_Type__c : objType,		
			Objective_Status__c : objStatus,		
			Version__c : objVersion,
			Start_Date__c : objStartDate,
			End_Date__c : j$('#newEndDate').val()							
	    });
	    if (objType === undefined)
		{
			alert("Objective type is required field!");				
		}else if (objStatus === undefined)
		{
			alert("Objective status is required field!");
		}else if ((objType === "Bug") && (objVersion === ""))
		{
			alert("Bug version is required field!");		
		}else
		{
	    	createObj.create(createCallback); 
	    }  	
    }        

    // Function to clear field values in create form
    function clearFieldValues()
    {
	    j$('#newName').val(''); 
	    j$('#newDescription').val(''); 
	    j$('#newVersion').val('');
	    j$('#newStartDate').val('');
	    j$('#newEndDate').val(''); 
	    j$('#statusRadioButton').hide();
	    j$('.version').hide();	    
	    setDateToday();    
	}

    // Function for Delete Objective
    function deleteObjective()
    {
       	var delObj = new SObjectModel.Objective(
	    {
	        Id : j$('#inputId').val()
	    });     
	    delObj.del(deleteCallback);    	
    }

    // Function to edit Objective
    function editObjective()
    {    
    	var colType = j$('#editObjectiveType').val();
    	var colStatus = j$('#editObjectiveStatus').val();

    	var editObj = new SObjectModel.Objective(
    	{
    		Id : j$('#editId').val(),
    		Name : j$('#editName').val(),
			Description__c : j$('#editDescription').val(),
			Objective_Type__c : j$('#editObjectiveType').val(),
			Objective_Status__c : j$('#editObjectiveStatus').val(),
			Version__c : j$('#editVersion').val(),
			Start_Date__c : j$('#editStartDate').val(),
			End_Date__c : j$('#editEndDate').val()	    		
    	});
    	if (j$('#checkboxUpgradeStatus').is(':checked'))
		{			
			var newStatus = setNewStatus(colType, colStatus);
			editObj.set('Objective_Status__c', newStatus);
		}		
    	editObj.update(editCallback);
    }

    // Function to set new Status for Objective
    function setNewStatus(colType, colStatus)
    {
    	var newStatus = "";
    	if (colType === "Bug")
    	{
    		switch (colStatus)
    		{
    			case "Open":
    			{
    				newStatus = "In Progress";
    				break;
    			}
    			case "In Progress":
    			{
    				newStatus = "Closed";
    				break;
    			}
    			case "Closed":
    			{
    				newStatus = "Closed";
    				break;
    			}
    			default:
				{
					alert("Unexpected error!")
				}
			}    		
    	}else if(colType === "Feature")
    	{
    		switch(colStatus)
    		{
	    		case "Collect requirements":
				{
					newStatus = "Open";
					break;
				}
				case "Open":
				{
					newStatus = "In Progress";
					break;
				}
				case "In Progress":
				{
					newStatus = "In Review";
					break;
				}
				case "In Review":
				{
					newStatus = "Closed";
					break;
				}
				case "Closed":
				{
					newStatus = "Closed";
					break;
				}
				default:
				{
					alert("Unexpected error!")
				}
			}
    	}
    	return newStatus;
    }

    // Function to change "undefiend" values to empty string
    function checkForNull()
    {
    	j$("td:contains('undefined')").html("");
    }
    
    // Callbacks to handle DML Remote Objects calls
    function createCallback(err, ids)
    {
	    if (err) 
	    { 
	        alert(err); 
	    } else 
	    {
	        j$('#theObjectivesTable').empty();
	        closeCreateModalWindow();
	        retrieveObjectives();
	        clearFieldValues();
	    }
    }

    function editCallback(err, ids)
    {
	    if (err) 
	    { 
	        alert(err); 
	    } else 
	    {
	        j$('#theObjectivesTable').empty();
	        closeEditModalWindow();
	        retrieveObjectives();
	    }
    }

    function deleteCallback(err, ids)
    {
	    if (err) 
	    { 
	        alert(err); 
	    } else 
	    {
	        j$('#theObjectivesTable').empty();
	        retrieveObjectives();
	    }
    }

    function setDateToday()
    {
    	var myDate = new Date();
    	j$("#newStartDate").datepicker("setDate", myDate);
    }

    // Functions for choosing appropriate Status list for each Type
	j$('#selectTypeOfObjectiveDiv').click(function()
	{			
		selectTypeOfObjective();
    });

    function selectTypeOfObjective(value)
    {
		var value = value || event;
		var target = event.target || event.srcElement;
		var corValue = target.value;

		switch (corValue) 
		{
			case 'Bug': 
			{
				j$("#statusRadioButton").show();
				j$("label[for=colReq]").hide();
				j$("label[for=inRev]").hide();
				j$(".version").show();
				break;
			}
			case 'Feature': 
			{
				j$("#statusRadioButton").show();
				j$("label[for=colReq]").show();
				j$("label[for=inRev]").show();
				j$(".version").hide();
				break;
			}
			default:
			{
				alert("Unexpected error!")
			}
		}
    }


    function openPicklistType()
    {
    	j$('#typePicklist').toggleClass('slds-is-close slds-is-open');    	
    }

    function openPicklistBugStatus()
    {
    	j$('#statusBugPicklist').toggleClass('slds-is-close slds-is-open');
    }

    function openPicklistFeatureStatus()
    {
    	j$('#statusFeaturePicklist').toggleClass('slds-is-close slds-is-open');
    }

    function closeCreateModalWindow() 
    {
    	j$('#newObjectiveModal').toggleClass('slds-fade-in-open slds-fade-in-close');
    	j$('.slds-backdrop').toggleClass('slds-backdrop--open slds-backdrop--close'); 
    }

    function closeEditModalWindow()
    {
    	j$('#editObjectiveModal').toggleClass('slds-fade-in-open slds-fade-in-close');
    	j$('.slds-backdrop').toggleClass('slds-backdrop--open slds-backdrop--close'); 
    }

     function closeModalWindow()
    {
    	j$('.slds-modal').toggleClass('slds-fade-in-open slds-fade-in-close');
    	j$('.slds-backdrop').toggleClass('slds-backdrop--open slds-backdrop--close'); 
    }

    function openCreateModalWindow() 
    {
    	j$('#newObjectiveModal').toggleClass('slds-fade-in-close slds-fade-in-open');
    	j$('.slds-backdrop').toggleClass('slds-backdrop--close slds-backdrop--open'); 
    }

    function openEditModalWindow() 
    {
    	j$('#editObjectiveModal').toggleClass('slds-fade-in-close slds-fade-in-open');
    	j$('.slds-backdrop').toggleClass('slds-backdrop--close slds-backdrop--open'); 
    }

</script>
</apex:page>